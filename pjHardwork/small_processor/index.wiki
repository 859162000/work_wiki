= Contents =
        - [[#微处理器|微处理器]]
        - [[#kit|kit]]
        - [[#数值的表示与存储|数值的表示与存储]]
        - [[#计算|计算]]
        - [[#指令|指令]]
        - [[#结构|结构]]
        - [[#设计|设计]]

= 微处理器 =
8位单任务微处理器。设计原因是学习处理器结构。
设计目标是：
- 汇编指令：目标、来源
- 指令定长
- 一条汇编指令可以译成多条机器指令
- 内存数据由变量引用
- 数据类型全字符，基于字符处理
- 内存数据全部连续存储

= kit =
- 指令：目标、源端
- 内存地址：自动管理，变量引用内存数据。
- 计算：模块自动读写内存。
示例：
temp = 158
x = 36
y = x+temp
print(y)
= 数值的表示与存储 =
CAM : Content Addressable Memory

由存储器进行存储，由地址映射器进行索引。
寄存器地址支持下一个、上一个移动。

变量存储方式：

| 有效、无效 | 起始、终止 | 数据 |

变量映射方式，基于地址：

| 变量起始地址 | 数值起始地址 |
|              |              |

单字符变量：
例 a = 32, b = 146
| 变量名 | 起始地址 | 结束地址 |
|--------|----------|----------|
| a      | 00000000 | 00000001 |
| b      | 00000010 | 00000100 |

多字符变量：x1 = 281
| 起始地址    | 结束地址    | 起始地址    | 结束地址    |
|-------------|-------------|-------------|-------------|
| 00000000(x) | 00000001(1) | 00000010(2) | 00000100(1) |

= 计算 =
加法器指向的是变量的起始和终止地址，然后自动相加。

= 结构 =

编译--译码

= 设计 =
[[doc/example|示例]]
[[doc/instructor|指令集]]
[[doc/adder|加法器]]
[[doc/regfile|寄存器堆]]
[[doc/addr_map|地址映射器]]


rtl/define.h
rtl/adder.v
rtl/regfile_ir.v
rtl/regfile_data.v

