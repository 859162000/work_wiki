= 微处理器 =
8位单任务微处理器。设计原因是学习处理器结构。

== 结构 ==
指令和数据的长度都是8位。指令使用定长结构。指令集自定义。

指令将一系列动作合并为一个基本功能单位。
比它更低一级的是基本动作：将数据从源移动到目标。
要实现一个功能，需要传递被加工数据，加工方法，结果送达的目标。
在流水级中，方法在指令中（？），可能一拍到达；数据在存储器中，可能需要多拍；
处理过程可能需要多拍；结果写回，根据目标不同，可能也要多拍。

在基本RISC流水级中，一条指令需要5级流水。
如果用目标+源的方式，则每条指令需要4级流水，因为译码时间变短。

指令与数据分开加载。这样在执行指令时，全部都是地址。

数据一般是从存储到运算（包括非存储的其它功能）、从运算到存储。指令相应是分为两种读、写。
读对应存储到运算，写对应运算到存储。

每条指令仅运输一个数据。
== 设计 ==
[[doc/instructor|指令集]]

rtl/define.h
rtl/adder.v
rtl/regfile_ir.v
rtl/regfile_data.v

