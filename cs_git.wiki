git config --global user.name "Your Name Here"
# Sets the default name for git to use when you commit
git config --global user.email "your_email@example.com"
# Sets the default email for git to use when you commit
git config --global credential.helper cache
# Set git to use the credential memory cache
git config --global credential.helper 'cache --timeout=3600'
# Set the cache to timeout after 1 hour (setting is in seconds), default is 15 minute.

# first fork in the GitHub.com
git clone https://github.com/username/Spoon-Knife.git
# Clones your fork of the repository into the current directory in terminal
cd Spoon-Knife
# Changes the active directory in the prompt to the newly cloned "Spoon-Knife" directory
git remote add upstream https://github.com/octocat/Spoon-Knife.git
# Assigns the original repository to a remote called "upstream"
git fetch upstream
# Pulls in changes not present in your local repository, without modifying your files
git push origin master
# Pushes commits to your remote repository stored on GitHub
git fetch upstream
# Fetches any new changes from the original repository
git merge upstream/master
# Merges any changes fetched into your working files

git branch work
git checkout work
git commit -a -m ""
git checkout master
git pull
git checkout work
git rebase master
git checkout master
git push origin master/ git format-patch origin

git submodule: get ref lib and update automaticly

dictator:
{{{
git init
git merge $developer_name
#git remote add $developer_name $url
#git merge -m $pull_request_file $developer_name
}}}

developer:
{{{
初始化：
git clone $dictator_dir
工作之前先本地更新：
git pull
开始工作。。。
结束工作：
git add $files
本地更新：
git pull
git commit -m "$message" or git commit -F $message_file
git pull origin $developer_name

//
git branch $developer_name
git checkout -b $developer_name
工作之前先本地更新：
git checkout master
git pull
git checkout $developer_name
git rebase master
开始工作。。。
结束工作：
git add $files
本地更新：
git checkout master
git pull
git checkout $developer_name
git commit -m "$message" or git commit -F $message_file
git pull origin $developer_name
git request-pull -p $developer_name origin > $pull_request_file(格式$developer_name_$date)
scp $developer_name+$date+pull $dictator_dir/pull
}}}
