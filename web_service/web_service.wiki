= 网络技术 =
xml + html + javascript + SVG + TLS

== 安全 ==
OpenSSL
# 生成私有钥 openssl genrsa -aes128 -out fd.key 2048
# 生成私有钥的公钥 openssl rsa -in fd.key -pubout -out fd-public.key
# 准备生成证书签名请求：Certificate Signing Requests CRS
  interactive: openssl req -new -key fd.key -out fd.csr
  unattended:  openssl req -new -config fd.cnf -key fd.key -out fd.csr
# 本地生成证书(自签名) openssl x509 -req -days 365 -in fd.csr -signkey fd.key -out fd.crt
# 哈希 
=== 私有认证中心 private certification authority(CA)===
配置、目录、密钥、根密钥、根证书
==== 认证中心相关名词 ====
CRL Certificate Revocation List : 证书吊销列表
==== Root CA Configuration ====
man config, ca

配置文件：
* [default]     : CA 信息
* ca_default    : CA 操作
* reg           : reg命令，用于自签名的根证书，只用一次
* sub_ca_ext    : 根CA的证书结构
* ocsp_ext      : ocsp响应设置

目录结构：
* certs     : 存放证书
* db        : 证书数据库
* private   : 私钥，一个是根CA，其它的是OCSP响应

==== 根CA ====
openssl req -new -config root-ca.conf -out root-ca.csr -keyout private/root-ca.key
==== 自签名证书 ====
openssl ca -selfsign -config root-ca.conf -in root-ca.csr -out root-ca.crt -extensions ca_ext
==== 证书吊销列表 ====
openssl ca -gencrl -config root-ca.conf -out root-ca.crl
==== 生成子证书 ====
openssl ca -config root-ca.conf -in sub-ca.csr -out sub-ca.crt -extensions sub_ca_ext
==== 吊销子证书 ====
openssl ca -config root-ca.conf -revoke certs/1002.pem -crl_reason keyCompromise
==== 在线证书状态查询 ====
生成密钥和证书状态查询响应，应对所有非CA认证的请求。

openssl req -new -newkey rsa:2048 -subj "/C=CH/O=PT/CN=OCSP Root Responder" -keyout private/root-ocsp.key -out root-ocsp.csr

用根CA生成一个证书。用于OCSP签名。这个证书不能被吊销，所以有效期应该较短。

openssl ca -config root-ca.conf -in root-ocsp.csr -out root-ocsp.crt -extensions ocsp_ext -days 30
==== 启动OCSP服务 ====
在应用中，OCSP证书与根CA应该分开存放

openssl ocsp -port 9080 -index db/index -rsigner root-ocsp.crt -rkey private/root-ocsp.key -CA root-ca.crt [[-text]]

openssl ocsp -port 9081 -index db/index -rsigner sub-ocsp.crt -rkey private/sub-ocsp.key -CA sub-ca.crt -text
==== 验证OSCP服务器 ====
openssl ocsp -issuer root-ca.crt -CAfile root-ca.crt -cert root-ocsp.crt -url http://127.0.0.1:9080
== xml ==
用 XML Schema 定义 XML 的结构和数据类型
用 XSLT 来转换 XML 数据
用 SOAP 来交换应用程序之间的 XML 数据
用 WSDL 来描述网络服务
用 RDF 来描述网络资源
用 XPath 和 XQuery 来访问 XML 数据
用 SMIL 来定义图形
=== XML Schema ===
xml/exam.xsd
xml/exam.xml
=== WSDL ===
==== wsdl 1.0 ====
每个wsdl文件可以有多个服务，用service进行包装。它指定服务的port, binding, 和IP地址。
每个服务用portType定义。
binding指定通信协议，type指定它绑定的portType对象。
将服务分成三个特定的、独立的操作：
* Types
* Operations
* Binding

| 元素          | 定义                             |   |
|---------------|----------------------------------|---|
| definition    | root,name,namespace              |   |
| types         | 定义消息数据类型，schema         |   |
| message       | 数据的抽象，文档或参数           |   |
| operation     | 消息的动作                       |   |
| portType      | 操作的集合，用于绑定             |   |
| binding       | 使用的通信协议                   |   |
| ports         | 绑定和IP地址的组合               |   |
| service       | 实现功能的终端，将终端与端口绑定 |   |
| documentation | 文档                             |   |
| import        | 引入其它wsdl or schemas          |   |


wsdl/wsdl.xml
wsdl/example.wsdl
wsdl/ConvertSpeed.asmx.xml
soap_RPC_doc.xml
== SOAP ==
soap_example.xml
== html ==
div 用来划分区域
== css ==
bordor-style(solid), width, color
float: 位置

== SVG ==
* SVG 指可伸缩矢量图形 (Scalable Vector Graphics)
* SVG 用来定义用于网络的基于矢量的图形
* SVG 使用 XML 格式定义图形
* SVG 图像在放大或改变尺寸的情况下其图形质量不会有所损失
* SVG 是万维网联盟的标准
* SVG 与诸如 DOM 和 XSL 之类的 W3C 标准是一个整体
= 网络服务 =
基本的 Web services 平台是 XML + HTTP。
三大要素：SOAP、WSDL、UDDI
== SOAP ==
* SOAP 指 *简易对象访问协议*
* SOAP 是一种 *通信协议*
* SOAP 用于 *应用程序之间* 的通信
* SOAP 是一种用于 *发送消息* 的格式
* SOAP 被设计用来 *通过因特网* 进行通信
* SOAP *独立于平台*
* SOAP *独立于语言*
* SOAP *基于 XML*
* SOAP *很简单并可扩展*
* SOAP *允许您绕过防火墙*
* SOAP 将作为 *W3C 标准* 来发展
== WSDL ==
WSDL 是基于 XML 的用于描述 Web Services 以及如何访问 Web Services 的语言。
* WSDL 指网络服务描述语言
* WSDL 使用 XML 编写
* WSDL 是一种 XML 文档
* WSDL 用于描述网络服务
* WSDL 也可用于定位网络服务
* WSDL 还不是 W3C 标准
== UDDI ==
UDDI 是一种目录服务，通过它，企业可注册并搜索 Web services。
* UDDI 指通用的描述、发现以及整合（Universal Description, Discovery and Integration）。
* UDDI 是一种用于存储有关 web services 的信息的目录。
* UDDI 是一种由 WSDL 描述的网络服务接口目录。
* UDDI 经由 SOAP 进行通迅。
* UDDI 被构建于 Microsoft .NET 平台之中。
* 
