
= version1 =
[[live_work/v1/readme]]
* 2016-8-23 15:31:35 wd2 # flask return wsdl
* 2016-8-26 16:29:49 wd5 # zeep recognize hello.wsdl of the service
* 2016-8-29 16:40:33 wd1 # zeep call the service, but fail; Not found: "/" is important
* next: custom to use wsdl


= 面向对象网络服务架构：信息高速公路 =
== 基本架构 ==
服务端 <==> 端口 <==> 端口 <==> 应用端 <==> 用户
== 模块分解 ==
{{{
+----+                    |       
| DB |                    |>原服务端
+----+                    |       
  |
  | DB interface
  |
+------------+            | 
| web server |            |>可选部件
+------------+            |
  |                        
  | SOAP                   
  |       ----------------+
+------+                  |
| port |                  |
+------+                  |
  |                       |
  | SOAP                  |>核心框架 
  |                       |
+------+                  |
| port |                  |
+------+                  |
  |       ----------------+
  | SOAP                   
  |                        
+------------+            |
| web client |            |>可选部件
+------------+            |
  |                        
  | app interface          
  |                        
+-------------+           |
| application |           |>原应用端
+-------------+           |
  |
  | APP
  |
+------+
| user |
+------+
}}}
 
 
== 功能 ==
# 管理服务
    - 注册服务
    - 发布服务
    - 接入服务
# 管理应用
    - 查询服务
    - 申请服务
    - 接入应用
# 传输消息
    - 类型识别
    - 权限认证
    - 历史记录
# 
== 实现方法 ==
* *注册服务* web服务器+web前端
* *发布服务* 配置文件描述，全局更新
* *接入服务* 在站点服务器增加服务地址映射。
* *查询服务* web服务器+web前端
* *申请服务* web服务器+web前端
* *接入应用* 在站点服务器增加应用地址映射。
* *类型识别* 请求类型
* *权限认证* 认证请求对象是否注册，认证请求是否满足服务要求
* *历史记录* 操作日志

== 模块 ==
* *生成Web Services* 生成WSDL文件
* *服务端SOAP解析* 根据WSDL，解析客户调用的服务
* *服务站SOAP解析* 从SOAP中，解析出目标服务

= 服务器架构 =
SOAP    : Spyne
Config  : Flask
 
 +------+  +----+
 |pyApp |->|WSDL|         1
 +-+-+--+  +-++-+         1
   | |       ||           1
+--+-+---+   ||           1
| pySoap |   | *.xml |    1
+--+-+---+   ||           1
   | |       ||           1
+--+-+-------++---------+ 1
|WSGI:                  | 1
|web server             | 1> Spyne
|gateway interface      | 1
|-----------------------| 1
|web服务器              | 
+-----------------------+ 
 |      |
 | http |
 |      |
+-------------+
| 客户端      |
| Zeep        |
| interface   |
+-------------+
 |       |
 | http  |
 | json  |
 |       |
+------------------+
|用户              |
|APP、web、database|
+------------------+

= structure of CS =
== 应用 ==
负责应用的注册、注销
== 配置 ==
管理配置文件
== 通讯 ==
管理与安全服务器的通讯
* 安全通道。建立安全通讯通道
* 请求处理。
  # 应用请求处理
  # 配置请求处理

== 安全 ==
- post大文件
- xml文件攻击:defusedxml, wsdl,soap

= 数据交换平台 =
== 需求 ==
# 数据共享
# 数据安全性
# 其它需求
=== 数据共享 ===
数据保存在不同的数据库中。
=== 数据安全性 ===
* 数据拥有者对数据使用者和使用方案进行授权。
* 数据安全传输通道保证数据安全传输。
* 监视传输的数据如何被使用。
== 解决方案（功能） ==
=== 数据共享方案 ===
现有的数据库或信息系统提供WebService接口，数据使用方通过网络远程调用接口，获取相应数据。
=== 数据安全方案 ===
* 对请求方身份进行识别（权限认证是否包括？）
* 对传输的数据进行加密（功能类似加密机）

= DEMO =
数据加密转发
== 安全服务器 ==
客户端与安全服务器通讯


=== 其它需求 ===
==== 信息重复录入 ====
市民在办理不同业务时，相同的信息会多次重复录入。
==== 信息冲突 ====
在不同业务系统中，同一人的相同属性，有可能出现冲突。
==== 信息时效性 ====
市民在更新部分信息时，已办理的业务系统，很难及时更新相关信息。
如，更换手机号，要通知很多家银行、保险等。
==== 应用推广 ====
当推出一项新的业务时，如何向目标用户推广？
== 应用 ==
# 单点记录
# 办理更新
# 信息复用
# 交换授权
# 业务发布
# 附加应用
# 
=== 单点录入 ===
在第一次办理时，进行信息录入。
=== 办理更新 ===
每次办理新的业务时，或者在任何一个业务进行更新时，所有相关业务系统同步自动进行更新。
=== 信息复用 ===
方案：
# 单点统一存储。
  每个平台（每个市政府建设一个）有一个集中市民通过信息管理中心。
  不管在哪里录入、更新、删除信息，都在统一中心进行管理。在业务系统中，不进行存储。
  市民也可以在统一中心进行维护。
# 单点分布存储。
  信息只存储在第一次办理业务的系统中。其它系统从中心获得信息存储位置。
# 多点分布存储。每个业务系统都进行存储。
  * 统一管理。信息的管理是在统一的中心。
  * 分布管理。自动同步自信息最新的业务系统中的信息。
推荐方案：
将市民信息进行分类：通用信息和业务信息。
通用信息是众多业务系统都需要用到的信息。
业务信息是个别业务系统用到的信息。
通过信息由统一信息管理中心进行管理，业务系统从中心获得信息。
业务信息如果只有一个业务使用，由其进行管理；如果有几个业务进行使用，则指定一个源数据库，存储最新的信息。
=== 交换授权 ===
平台信息的使用权需要平台统一管理。
在每个业务接入平台、每个信息录入平台之前，先由相关业务进行协商，达成信息使用协议：
信息管理者，信息使用者，信息使用范围（可考虑）等相关约束。
在平台管理中心，安协议设置相关权限，然后允许业务接入和信息录入。
=== 业务发布 ===
当推出新的业务时，在授权管理完成后，可以接入平台，并且在平台发布中心增加业务描述与接口。
=== 附加应用 ===
* 单点登录。
  - 建立单点登录系统，将eID（某种卡）作为统一登录帐号。
  - 代替登录系统。  将接入业务系统中原有的帐号进行相互关联，每种满足安全等级要求的卡都可以作为登录帐号。
  单点登录系统与每种卡的原认证系统对接。在进行帐号认证后，单点登录系统对认证信息进行包装，
  使用业务中原来帐号登录相应的系统。
* 跨平台帐号。不同平台的业务系统可能使用相同的认证手段。
  当非本地市民进行跨平台登录时，平台可以根据认证手段，在更高层信息中心查询卡的有效认证中心。
  实现跨平台认证手段互通。
== 设计 ==
安全
=== 示例 ===
==== 两限房申请资格查询认证系统 ====
# 户口：公安局提供个人户口查询功能，返回是否是本地户籍
# 社保：税务局提供个人社保历史查询功能，返回是否连续缴纳社保多长时间。
# 家庭收入：由公安局提供家庭成员列表，由所在企业提供收入证明
  （如果企业接入平台，则可以提供在线查询）。



system requirements  <------>   system test
system design  <------------>   system integration
subsystem design  <--------->   subsystem test
outline(general) design <--->   module test/subsystem integration
detail design  <------------>   unit test
                      coding

system requirements
commpoments:
user(eID : identity card)
service provider
database
authentification provider
data transport

| system requirements       | design              | test |   |   |
|---------------------------|---------------------|------|---|---|
| commpoments               | >                   | >    | > | > |
| user(eID : identity card) | IP                  |      |   |   |
| service provider          | adapter             |      |   |   |
| database                  | adapter             |      |   |   |
| authentication provider   | eID auth            |      |   |   |
| data transport            |                     |      |   |   |
| operation flow            | design and manage   |      |   |   |
|                           |                     |      |   |   |

= flow cetification = 
Service Provider designs a flow according to its service.
SP submmits this flow to Infor-way. Infor-way checks the flow format, and
send it to related departments to authonticate the flow one by one. 


