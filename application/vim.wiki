= vim plugin =
manage
""git submodule add https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim

PluginInstall

Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'vimwiki/vimwiki'
Plugin 'godlygeek/tabular'
Plugin 'mathjax/MathJax'
Plugin 'othree/xml.vim'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdcommenter' : 代码注释 \cc
Plugin 'garbas/vim-snipmate'      : 代码块自动扩展
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'

xmledit : let g:html_* = 1

vimball
vimwiki
ctags58

[[vim/snippets]]
= vim useage =
<F2> number
寄存器 "* 剪切板，""缓存区
:w ++ff=unix
== indent ==
插入模式
    Ctrl-T增加缩进，Ctrl-D减小缩进。 
命令模式
    >> 右缩进， << 左缩进，注意n<< 或 n>>是缩进多行，如4>> 
可视模式
    < 、 > 用于左右缩进， n< 、 n> 可做多节缩进，如 2> 。 

另外，= 可对选中的部分进行自动缩进；]p可以实现p的粘贴功能，并自动缩进。 
== jump ==
跳转到定义
    gd到局部变量的定义，gD到全局变量的定义 
搜索
    *, # 可对光标处的词向前/向后做全词搜索，g*, g# 做相对应的非全词匹配搜索 
代码块首尾
    [[, ]] 可跳到当前代码块起始或结束的大括号处。 
括号首尾
    % 可在配对的括号、块首尾之前跳转。 
位置历史
    Ctrl-O 在历史记录中后台，Ctrl-I 则为前进。
= vim set =
_vimrc : 如果其中出现了中文，编码方式要与系统一致。如，在windows中文系统中，要使用cp936。
syntax on  "开启语法高亮
filetype indent plugin on "依文件类型设置自动缩进
set ruler "显示当前的行号列号：
set showcmd "在状态栏显示正在输入的命令
DoMatchParen "关闭/打开配对括号高亮
"NoMatchParen
set number "显示行号：
"为方便复制，用<F2>开启/关闭行号显示:
nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>
"为深色背景调整配色
set background=torte
== :digraph ==
 special string input: ctrl-k 
  * vr ├
  * vh,ud,lr
  * FD/BD /\
  * !2 ‖
  * ├├
== vim pic ==
整行补全                        CTRL-X CTRL-L
根据当前文件里关键字补全        CTRL-X CTRL-N
根据字典补全                    CTRL-X CTRL-K
根据同义词字典补全              CTRL-X CTRL-T
根据头文件内关键字补全          CTRL-X CTRL-I
根据标签补全                    CTRL-X CTRL-]
补全文件名                      CTRL-X CTRL-F
补全宏定义                      CTRL-X CTRL-D
补全vim命令                     CTRL-X CTRL-V
用户自定义补全方式              CTRL-X CTRL-U
拼写建议                        CTRL-X CTRL-S 
== digital circuit ==

    ┌┴┐     O    --+--   +--+--+  +---  
    │ │    / \   \   /   | din |  |   \ 
    \ /   /   \   \ /    |w    |  |    O
    οΟ    --+--    O     | dou |  |   / 
                         +--+--+  +---                

let i=1|g/playOrder=""/exe "s//playOrder=\"".i."\"/"|let i=i+1
let i=1|g/1/s//\=i/|let i=i+1
\=i \=是把后面的字符串当成表达式来对待,在这里就是i的值
|   (逻辑或的符号)用以连接三个语句
:%s/\n/ /gc    :::   让字母横排
let i=1|g/^/s//\=i/|let i=i+1

== 自动添加行号 ==
:g/^/exe “s/^/”.line(‘.’).’ /’
:let i=1|g/playOrder=""/exe "s//playOrder=\"".i."\"/"|let i=i+1

== wiki ==
%title 文章标题-VimWiki插件
%toc 文章目录
== 编码 ==
chinese 是个别名，在 Unix 里表示 gb2312，在 Windows 里表示cp936，也就是 GBK 的代码页
= tips =
viminfo文件权限会影响打开文件到上次编辑位置。
set paste : 关闭粘贴时，自动注释功能。
od -c *   : 显示文件字符
noremap是用于insert模式的非递归映射，
nnoremap是用于normal模式的非递归映射，
vnoremap是用于visual模式的非递归映射.
<Plug>	在脚本外部是可见的。它被用来定义那些用户可能定义映射的映射。<Plug> 是
  	无法用键盘输入的特殊代码。
  	使用结构：<Plug> 脚本名 映射名，可以使得其它插件使用同样次序的字符来定
  	义映射的几率变得非常小。在我们上面的例子中，脚本名是 "Typecorr"，映射
  	名是 "Add"。结果是 <Plug>TypecorrAdd。只有脚本名和映射名的第一个字
  	符是大写的，所以我们可以清楚地看到映射名从什么地方开始。
<SID>	是脚本的 ID，用来唯一的代表一个脚本。Vim 在内部将 <SID> 翻译为
  	<SNR>123_，其中 "123" 可以是任何数字。这样一个函数 <SID>Add() 可能
  	在一个脚本中被命名为 <SNR>11_Add()，而在另一个脚本中被命名为
  	<SNR>22_Add()。如果你用 :function 命令来获得系统中的函数列表你就可
  	以看到了。映射中对 <SID> 的翻译是完全一样的。这样你才有可能通过一个映
  	射来调用某个脚本中的局部函数。
virtcol('.') : 查看当前光标虚拟位置

= pattern =
\%23l : 第23行
\%23c : 第23列
\%23v : 第23虚列

