= 快捷编辑功能 =
1. 自动生成文件头<C-e>h
2. 产生列数字（ctrl-V :I)

使用snippets实现
1. begin end
2. always
3. case
4. if
5. 

= 文件格式化 =
1. 自动定义变量
2. 添加分号
3. 添加端口
4. 模块链接
5. 

= 功能实现 =
== 自动定义变量 ==
关键字：变量位置，变量定义格式，变量名空间，变量类型，变量宽度

1. 建立变量名空间
2. 查找已定义变量名
3. 查找变量
4. 与变量名空间名称比较：名称，类型，宽度

== 变量名空间 ==
{名称：，位宽：，类型}
[[],[],[]]
类型有：pin, reg, wire
== 变量定义方式 ==
wire|reg [:] 'name'
== 变量出现方式 ==
=== 变量名： ===
变量是字符串 : \w* 
结构：
operator : &, ~, !, =, ?, +, -
statement : \w* = (\w*(operator*))*;
if (\w*[^><](==|!=)) begin
case (\w*) begin
   state: statement
=== 变量宽度 ===
根据其数据来源而定。
=== 变量类型 ===
always块中是reg，其它是wire

== 算法 ==
1. 进行入module
2. 查找pin定义
3. 分析当前行

= 关键字列表 =
{{{python
{'`':'^`(\w+)',
'`timescale':'`timescale \d+\ws/\d+\ws',
'`define':'`define (\w+) (\S+)',
'`include':'`include "(\w+\)"',
'//':'//',
'/*':'/*',
'*/':'*/',
'module':'[^\w]module (\w+\) *\(',
'input':'',
'output':'',
'reg':'',
'wire':'',
'always':'',
'@':'',
'(':'',
')':'',
'begin':'',
'end':'',
'if':'',
'else':'',
'case':'',
'default':'',
'=':'',
'+':'',
';':'',
'?':'',
'&&':'',
'&':'',
'|':'',
'~':'',
'!':'',
':':'',
'{':'',
'}':'',
"'":'',
}
}}}

= 程序设计 =
按行进行正则匹配

== 文件结构 ==
verilog文件分成两部分：头和模块。
头中有timescale, define, include,其中关心是宏定义和引用文件。
从模块开始，都是模块结构内容。

