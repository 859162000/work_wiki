
= 安全 =
== 授权机制 ==
=== OAuth 2.0 ===
这是第三方网络授权机制。
通过这个机制，资源所有者能够向第三方应用授权，
允许应用使用资源所有者的部分资源。
* 名词列表
  - client : 第三方应用，需要用户授权的应用
  - Resource Server : API server， 用户资源接口
  - Authorization Server : 提供用户允许或禁止授权的接口
  - Resource Owner : 用户，资源所有者
* 应用流程
  - 注册应用：向授权服务器注册应用，并且注册重定向链接。
    重定向链接必须是使用TSL加密的。注册完成后，会获得应用ID和应用密码。
    ID是公开的，而密码必须保存好
  - 授权：OAuth先要用户授权，授权认证类型有：授权码（app）、密码（登录）、
    用户凭证（client credentials，应用权限）
* 网络服务

== 认证机制 ==
=== OpenID ===
这是身份认证机制。它通过url认证当前用户身份，为第三方应用提供认证服务。
它是基于OAuth 2.0。
它也允许应用从服务器上获取用户基本信息。

The OpenID Connect protocol, in abstract, follows the following steps.

    1. The RP (Client) sends a request to the OpenID Provider (OP).
    2. The OP authenticates the End-User and obtains authorization.
    3. The OP responds with an ID Token and usually an Access Token.
    4. The RP can send a request with the Access Token to the UserInfo Endpoint.
    5. The UserInfo Endpoint returns Claims about the End-User.

These steps are illustrated in the following diagram:

{{{
+--------+                                   +--------+
|        |                                   |        |
|        |---------(1) AuthN Request-------->|        |
|        |                                   |        |
|        |  +--------+                       |        |
|        |  |        |                       |        |
|        |  |  End-  |<--(2) AuthN & AuthZ-->|        |
|        |  |  User  |                       |        |
|   RP   |  |        |                       |   OP   |
|        |  +--------+                       |        |
|        |                                   |        |
|        |<--------(3) AuthN Response--------|        |
|        |                                   |        |
|        |---------(4) UserInfo Request----->|        |
|        |                                   |        |
|        |<--------(5) UserInfo Response-----|        |
|        |                                   |        |
+--------+                                   +--------+
}}}

= dojo =
Javascript框架。
引用方法：
<script src="//ajax.googleapis.com/ajax/libs/dojo/1.10.4/dojo/dojo.js"
            data-dojo-config="async: true"></script>
	   
它使用AMD格式，Asynchronous Module Definition。

导入dojo时，就只有导入AMD加载器，它定义了两个全局变量：require和define。
require加载模块，define定义自定义模块。

HTML DOM操作模块是dojo/dom和dojo/dom-construct。



= Rails =
一种高效Web开发框架，基于Ruby。

= Java web structure =
* client tier
* middle tier -- Java EE 
  - web tier
  - business tier
* data tier -- enterprise infomation

structure:
- components
- container : Web EJB Application_client
- Java EE platform

== first cup project ==
NetBeans IDE + Glassfish + Maven + dukesage archetype
{{{
        JAVA EE Server                       
+------------+------------------------+
|dukes-age   |    first cup           |
+------------|------------------------|
|jax-rs      |  JavaServer Faces      |
|    ^       |   Application          |
|    |       |         v              |
|    +-------|---Enterprise Bean      |
|            |         v              |
|            |   Java Persistance API-|->Java DB
+------------+------------------------+
}}}

# Creating Web Service, dukesAgeResource
  # prepare the jax-rs file
  # start glassfish, DB is started at the same time.
  # build and deploy the web service endpoint
# Java Persistance API, API to database, FirstCupUser
# Enterprise Bean, DukesBirthdayBean
# Web client, DukesBDay class, Facelets pages
  # call dukeages web service to get duke age
  # call dukesBirthdayBean to get age difference
  # create Facelets Client: a resource library, a composite component, two
    XHTML files.

= JAVA Security Mechanisms =
== SE Security Mechanisms ==
* Java Authentication and Authorization Service (JAAS)
* Java Generic Security Service (Java GSS-API)
* Java Cryptography Extension (JCE)
* Java Secure Sockets Extension (JSSE)
* Simple Authentication and Security Laye (SASL)
* http://docs.oracle.com/javase/7/docs/technotes/guides/security/
== EE Security Mechanisms ==
Java EE security services are provided by the component container and can be
implemented by using declarative or programmatic techniques.
=== Application Layer Security ===
Scuring Containers
=== Transport Layer Security ===
Point-to-Point not End-to-End
=== Message Layer Security ===
Security information is contained with the SOAP message.
GlassFish Server supports message security using Metro, a web services stack
that uses Web Services Security (WSS) to secure messages. Because this message
security is specific to Metro and is not a part of the Java EE platform, this
tutorial does not discuss using WSS to secure messages. See the Metro User's
Guide at :
https://metro.java.net/guide/
== Security Containers ==
Application security. Two types: declarative and programmatic
=== Using Annotations to Specify Security Infomation ===
=== Using Deployment Descriptors for Declarative Security ===
=== Using Programmatic Security ===


= Tools =
== java web ==
java JDK
sudo update-alternatives --install "/usr/bin/java" "java" "/usr/lib/jvm/jdk1.8.0/bin/java" 1
sudo update-alternatives --install "/usr/bin/javac" "javac" "/usr/lib/jvm/jdk1.8.0/bin/javac" 1
sudo update-alternatives --install "/usr/bin/javaws" "javaws" "/usr/lib/jvm/jdk1.8.0/bin/javaws" 1

Correct the file ownership and the permissions of the executables:
sudo chmod a+x /usr/bin/java
sudo chmod a+x /usr/bin/javac
sudo chmod a+x /usr/bin/javaws
sudo chown -R root:root /usr/lib/jvm/jdk1.8.0

sudo update-alternatives --config java

== apache2, php5, mysql ==
* 安装包：
apache2, php5, libapache2-mod-php5, php5-mysql, mysql
=== mysql ===
mysqladmin start
mysqladmin -uroot -ppassword shutdown
mysqladmin restart

安装develop
libmyslclient-dev
 mysql -u root -p
 SET PASSWORD FOR 'root'@'localhost' = PASSWORD('<yourpassword>');
 Query OK, 0 rows affected (0.00 sec)


