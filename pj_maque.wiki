work dir
~/astar/rtl/
temp.v
next : tray station test

= 通用设计 =
任何指令都需要经过null状态，然后才是下一指令？还是有抖动。可以null长时间
任何信号的第0位代表时钟。上升沿采样。<br />
对于机械设备，可能存在抖动（如机械开关），则可以采用高低两位错位时钟。<br />
对于采样和置位操作，为了保证成功，可以考虑增加检测操作。当置位成功后，取消置位信号。但也有另一种考虑，当动作过快时，系统必然不可能完全存储信息，此时？？如高速移动物体，照像机会叠加影像。一种方法是用新的替代旧的，另一种是忽略新的指令。
== pulse keep ==
保持信号当前状态一段时间。有些代码中，被控信号需要一定延时才能采样到数据。如下面的代码。当en来的时候，需要延时5秒后，reg才能采样value。如果en保持时间小于5秒，则reg会采取else语句中的动作。保持信号状态模块的功能是，当en变化为1时，能够保持1至少5秒。
{{{
if (signal_en) begin
  #5 reg = value;
end
}}}
== 储存 ==
写入时，只需要写使能+写数据。当写使能关闭时，写数据变化。
== 异步操作 ==
保持时间：默认信号发出端能保持。保持方法：发送端计时一段周期。后天用某种方法能够调整保持时间长度。
对于固定程序，程序的发射是受时钟控制的。这样可以保证指令的持续时间。
== 数据选择 ==
数据选择时，用多路与、或操作，不要用传输门或三态门。
== 可配置逻辑 （未来）==
设置许多配置寄存器，可以将逻辑变成不同的计算单元，类似可编程逻辑器件。

= 设计目标 =
 # 预测
 # 托盘。能接东西扔在上面能缓冲。
 # 马车。由马拉的车。
 # 马。可以骑的马。
= 模型 =
== 测量系统 ==
测试系统分为外测和内测。外测主要负责精确测量和绝对测量，内测则是变化测量和相对测量。<br />
运动是绝对的，静止是相对的。参考系的不同，决定物体运动状态的不同。在非惯性系统中，物体受到非惯性力。
物体状态的改变应该是指相对参考系的参考部分的改变，而不是相对完整参考系。以后的运动均是指相对参考系的运动。
物体的控制，应当参考相对物体即可。当相对物体是惯性系统时，不需要考虑参考系统的绝对值。
物体的运动有起止，因此参考物体的边界是有意义的。
内测的测量内容是相对运动和相对边界。
外测的测量内容是运动的绝对速度和边界的绝对位置，作为当前控制是否达到目标的参考。

== 目标预测 ==
预测：以时间dt通过测速窗口后，多长时间能到达终点。<br />
生物功能：远距离击中运动的物体
变量：1 v0; 2 s; 3 v0, s; 4 增加摩擦力；
目标：dt = s/v0; dt = tt; dt:预测时间，tt：测量时间<br />
方法：已知函数fxs,fxts,fxto=>fyte<br />

== 托盘 ==
=== 功能 ===
* 根据目标，将物体扔起一定高度。
== 认知 ==
本能：匹配所有的输入和输出。
=== 目标 ===
 * 托盘压力不超过一定值
 * 托盘高度最终达到起始高度
 * 自己将物体扔起一定高度，自己接住
 * 物体下落，托盘接住
=== 机器 ===
超声波探测
=== 工作过程 ===
是否是自动建立？主控发出各种控制组合，达成最终目标。因此，系统应该是目标导向。
探测是否达到目标，如果没有，则开始输出，探测是否接近目标。
<br />
托盘工作过程：
初始化：得到基本的信息，托盘的重量
放物体：将托盘放在最底端，放上物体
感受物体：上下移动托盘，感受物体重量，感受完成后，停在指定的高度
扔起：将物体扔到一定的高度（反射）
接住：平缓接住下落的物体（反射），然后停在指定的高度。
=== 速度的表示 ===
物体通过系统固定感知窗口的时间，或者是固定时间内物体移动的距离（暂定这个）。
=== 外感知 ===
是否感知到物体 obj_true;
物体当前高度 hobj;
拖盘当前高度 htray;
托盘受到的压力 ftray;
=== 内感知 ===
是否感知到物体 obj_true;
物体高度变化 d_hobj;
拖盘高度变化 d_htray;
托盘受到压力的变化 d_ftray;
=== 系统 ===
系统时间 tsys;
力矩方向 dtorque;
力矩大小 ftorque;
=== 固定值 ===
拖盘目标高度 httray
托盘最高高度 hhtray
托盘最低高度 hltray
力矩最大值 ftray_max
力矩最小值 ftray_min
=== 记录 ===
托盘压力的变化过程
== 数据传输系统 ==
在运动控制器和主控之间，传输的并不是数据绝对值，而是指令和相对数值。
这样做的意义在于，不会突然剧烈变化。
=== 控制系统 ===
外感知的输入映射成具体的状态列表。主控系统根据状态，选择动作命令。
运动系统根据命令，采取相应的动作。
当开始运动后，主控系统根据外感知（内感知）来判断当前运动是否符合要求。
如果符合，则继续动作，记录动作；否则，则调整命令与状态的映射强度（该指令对该状态改变快慢）。
如果动作不符合，则运动系统进行调整。下一次如果是当前状态和当前的感知，则用新的运动进行替代。
当动作结果跟感知参数有关系时（相同的动作在不同的参数有不同的结果），生成新的指令（或者扩展原有的指令）。
=== 部件 ===
==== 动作 ====
* 增加力矩：计数增加，每次加1.
* 动作指令：增加或减少，变化的速度。
=== 设计 ===
=== 数据传递器 ===
data_pass_tx/rx.
当前级数据与下一级数据一直时，认为数据正确传递。
当前级数据可以随时变化，直到与下一级相同时，……
=== 函数序列 ===
{动作，状态，时间}
动作：肢体的动作指令
状态：肢体的当前状态，不是位置，而是运动
时间：此动作和状态的持续
状态表示：生命结构是极点结构，非直角参考系。

== 马车 ==
环境检测（感知系统）：
 * 直行前方路面状态：平面，倾斜（角度），台阶
 * 转弯？转弯人为控制转角
 * 左右有障碍物
 * 后方有加速物
指令输入： 动作指令 -停 -前行 -后退 -加速 -减速 -急停
动作反射。记录指令+状态=反射，并根据当前动作指令和环境，做出一定的动作。
反馈：
 * 目标状态
 * 肢体状态
调整：
 * 根据目标状态和肢体状态，针对当前动作，调整反射。调整的目标是让目标状态和肢体状态更接近预设目标。
零件：
马车由一堆零件构成，每个零件只有一个输入。多个零件构成器官。<br />
器官：
 * 一个曲申关节由两根骨，两个驱动，角度探测构成。

最精简模型基本构成：
 * 主感：目标反馈器，判定当前整体动作达成的效果如何。
 * 原核：根据主感的结果，调整整体的动作反射。
 * 命令：整个动作指令输入。
 * 关节：最精简的能曲伸的关节。

功能：
 # 站立。判断条件：关节不能再伸展。
 # 根据指令进行曲伸动作，造成原地跳跃的效果。动作开始和结束都是平稳直立状态。
基本指令就是跳起多高。主感目标有两个：一是高度，二是落地平稳（加速度最小）。<br />
  
基本结构
* 状态检测：根据输入，判断当前状态。在系统初始化时，有一些基本状态。在系统工作过程中，是否增加一些状态？
* 状态动作映射：
== 高级功能 ==
精度调节
== 映射的基本设计 ==
生命一切活动都是反射。机器一切行为也同样如此，对输入有一定响应的硬件。
智能的意义是，不同的响应对应不同的解释（意义）。机器的解释是软件（数据）。
生物本身是一种硬件，通过活动积累经验，形成意义。意义的积累、传递（复制），形成社会。
参照此模式，设计一个硬件系统：硬件+软件。硬件具有存储、映射、抽象（高级功能？）等能力。
软件是计算程序，类似操作系统和应用，由用户书写或抽象形成。<br />
数据用一定的1表示，0表示一种状态，也是有效输入。
=== 简单映射 ===
定义映射： f(x) = y<br />
因，果。<br />
支持反映射：果，因。<br />
如果函数由因到果是一对一，但反函数却不一定。另外函数定义也可能一对多，支持多项映射（未来）。<br />
简单映射是一对一，复杂映射是矩阵形式。<br />
[ a1 a2 a3 ] [x1] = 0<br />
[ b1 b2 b3 ] [x2] = 0<br />
[ c1 c2 c3 ] [x3] = 0<br />
当得到其中任意一行两个变量的具体值，就能得到第三个变量的具体值。如知道a行的x1,x3(a1,a3)，则可以知道x2的值(a2)。<br />
=== 响应序列 ===
响应序列就是反射。
每一种响应，都有一个起始（或关键字）加一系列动作形成。如“数数12345。。。”，也可以说成“我们来数数吧，12345。。。”
对于简单智能而言，都能够完成相同的任务。又或者当我们说起“123”时，简单智能自动跟上“456。。。”
按此推论，智能的响应是一个序列，当满足一系列条件时，就可以触发。对于机器，则简化为指令程序：“数数”。<br />
反射的形成：激励序列，响应跟随，响应强化，反馈奖励，响应记忆。
        激励序列
            |
            |
  +--Y-反射列表有？-N-+
  |                   |
走反射            反射添加
                      |
                  响应跟随
                      |
              +-Y-有反馈？-N-+
              |              |
          奖惩等级          结束
              |               
          ||||||||
          强化/弱化响应
              |               
            结束               
=== 训练 ===
每种反射或者活动过程中，奖惩反馈都会加强或者弱化当前反射。
| 奖惩 | 意义 | 动作         |   |
|------|------|--------------|---|
| 1111 | 禁   | 停止当前反射 |   |
| 1000 | 差   | 最小当前反射 |   |
| 0100 | 欠   | 弱化当前反射 |   |
| 0000 | 无   | 正常处理反射 |   |
| 0010 | 良   | 加强一级反射 |   |
| 0001 | 好   | 加强两级反射 |   |
| 0011 | 优   | 置反射最高级 |   |
|      |      |              |   |
反射等级：决定了响应的快慢和精度。
在系统设计中，不同等级的反射在不同的反射存储器（脑，内存或缓存或快存）中，不常用的则放在记忆中，偶尔用到的存在其它硬件中。
=== 启动 ===
系统初始是空白，一切意义需要定义。定义过的，则记录在芯脑中。以后再启动，则首先从芯脑中获得当前状态。
首先是定义关键字列表。每个关键字对应着一段解释。解释可能是对个关键的解析方法描述。<br />
需要的基本硬件是：输入设备（激励），映射器件（映射），映射存储器件（存储），输出器件（响应）。
=== 输入缓存 ===
输入的数据首先要记录。用一组移位寄存器组缓存一定长度的输入。
功能定义：<br />
 # 只要有不同输入，就开始缓存。缓存的第一列永远等于输入。
 # 有控制信号决定是否将输入向后传递。
 # 未：有控制信号决定是否将缓存数据存储。
 # 未：输入计时，记录输入信号持续的时间。
=== 运算块 ===
 * 块类型定义：处理器有多个块的时候，不同的块处理不同的运算。
 * 基本存储单元是寄存器。用write作为时钟写入。
 * formula 每行构成一个公式：一个操作符，两个操作数，一个结果。
 * func_mod。多行formula串联构成。功能有只有写。用data_type控制写数据还是模块名，用read控制是循环写（最后一级数据输出）。当xi端口数据与一个formula的x数据相同，则输出对应的yo=f(x)。
=== 初始化 ===
初始化由内外合作完成。内部状态设定为初始化，等待输入。
外部依次输入激励和响应。初始化过程是一一映射。如果有记忆，则先从记忆中读取
在初始化时，
next
=== 硬件 ===
记忆：青青专属存储设备，不能直接用任何软件指令修改，除非硬件写入。SD卡
== 程序设计 ==
基本指令：可识别输入。
* 数数--
* 从0001数到1000--
=== 程序示例 ===
==== 数数 ====
起始时，芯脑中是空，什么也没有。输入序列“数数123456。。。”，则芯脑记录，同时，输出相同的序列。
多次输入序列以后，每次少输入最后一个数，芯脑强化反射，自动补全输出序列。
最终实现的目标是，输入“数数”后，青青能自动输出“123456。。。”。
（1）从1数到n。
design: 
  公式：数列，
 xi   yi
0000 0001
0001 0010
（2）x的下一个数是多少？

= 计算机 =
== 时序控制 ==
时钟系统是硬件顺序执行指令的参考。每拍时间内，硬件完成各自任务，自动取出下一指令，构成流水级运行。时序系统容易控制，缺点是功耗较高，因为在不工作时，时钟也在翻转。
如果设计系统不用时钟会怎么样？
没有时钟的系统基本特征：
  * 上级向下级发送开始指令
  * 下级向上级反馈空闲状态（可以接受指令）
执行
== 模块起止 ==
  * 检测器件状态为空
  * 上升沿将数据和指令写入，器件状态置忙
  * 写入后器件开始运算
  * 运算结束后，上升沿写入输出端口，置输出有效
  * 输出写回，器件状态置空。写回是用下一指令完成，也可在本指令上存储写回地址（本系统使用）。
  *
== 指令 ==
  * 每条指令都有指令号，
  * 一条完整的运算指令包括取到数据，送到器件运算，结果写回，下一指令。
  * 指令随数据一起传输。每到一个器件，运行指令的前面部分，完成后，将这部分清零，将运算结果和指令余下部分一起向下传递。
  * 
== 取指 ==
取指的意义是获得下一条要执行的指令。指令的来源有多种：寄存器下一条指令；寄存器某地址指令；临时指令。
取指将完整指令从存储器读出，输出到传输总线上。
== 数据传输系统设计 ==

= 汉字编码与存储 =
汉字的编码用utf-8，存储成为数据时，也用utf-8。在系统接收键盘输入时，将每个输入映到唯一的汉字编码中。不存在一码多字，但允许多码同字。
汉字的系统编码对应输入法。在不同的输入法下，编码不同。每个汉字都唯一编码。在不同的语境中，编码可以发生改变，尤其是简码。
e,en,eg(eng)
dage dagxia
xivan
v代表元音开头的字母。u代表u和yu
如风，编码成fegflfg
在词组输入时，
点，横，竖，撇，捺，横折，竖折，撇折，钩
a,  s,  d,  f,  g,  h,    j,    k,    l
= 输入输出系统 =
？手写或者用结构写出汉字。
在中文输入法下，系统自动识别。将
== 介绍 ==

== 数据中转站 ==

*系统级管理*
文件一致性管理办法：
文件有两种模式：读和写
当有应用读文件时，不对硬盘文件进行任何操作。
当有应用写文件时，硬盘文件属性设为只读。

*IDEA*
接口有两种：主从接口和双向接口。
主从接口有一个主控制器，其他设备都受控于主设备。通道是双向通道，同一时刻只能有一个设备发数据。
双向接口是收发单向通道，可以同时收发。

*接口设计*
接收端口一直采样。采样频率是数据率的两倍速（正负沿采样）。
两根线。

*数据传输*
数据包传输。
头（目标）（将路径设置）
体（数据）（数据）
尾（结束）（可以无，默认将数据传输到上一次头设置的目标）

*计算逻辑*
？逻辑电路有突变怎么办？应当在接口处同步，同步就是存储，同步后再存入集中的寄存器堆

= 设计思想 =
== 背景 ==
每个程序都是为了完成一个任务，那么一台计算机就可以理解成以完成任务为目标的设备。
计算机完成任务是执行程序。人工控制一个一个程序。每个程序都是一个指令序列。将程序也当成指令则执行程序可以认为是，由人工发出指令，调用设计好的指令包，程序是宏观指令。
程序是图灵机。指令流实现它。指令操作切流水级：取指-译码-发射-执行-写回。
智能是有目标的或者是有驱动的。生命的本能是为了生存，而机械的本能应该是为了更好完成任务。
每个任务都可以分解成更小的功能，以小功能为单位进行随机或是有目的的进行调整，目标是为了获得更多的优或高。
硬件的思考和软件的思考有什么不同？
有时钟和无时钟有什么区别？
无论系统如何设计，任务都是一个序列。
智能在于学习。机械智能如何学习？
生命在于不同。相同的指令在不同的生命体会得到不同的响应，机械生命如何不同？
生命在于创造。机械生命如何创造？
机械的问题不在于机械，而在于数据。如果有可以自我优化的算法，则从软件角度可以实现生命，而硬件只是实现它。
== 思考 ==
一个程序是一系统指令，一个指令切分很多流水级。一条指令经过多个部件，协同合作完成。分流水后，指令也随流水传递。
始终硬件模拟工作，而不是时钟控制，流水工作。
模拟工作最简单的就是反相器等各个逻辑门。各种模拟电路也是。
模拟设备基本的功能就是模拟。存储。建立反射（联系）。反馈调整反射。
电路结构设计成三部分：输入，反射，输出。用某种方法建立反射，在不同的反射情况下，相同的输入产生不同的输出。
最简单的逻辑是：反相和同相。单输入，单输出。
系统设计难点在于确定目标状态。从多个角度反馈，确定系统的状态达到了目标状态。
控制分为两类：开环和闭环。

= bak =
== -1 比较大小 ==
两个输入，比较两个大小，并得到二者的差。
并且估计二者之间的倍数关系。
复制较小的数据，直到接近大的。
过程：将数据移入比较器，比较大小，复制两个数据，移位小的数据，记录复制次数，直到两个新数据的差小于小的输入数据。
{{{
input a,b.
  if a > b:
    lcd = ld = a
    scd = sd = b
  while |lcd-scd|>sd:
    scd += sd
    add_cound += 1
}}}
=== 数据存储方法 ===
用列表存储数据。一个输入占据128位，如果长于这个数据，则用多行表示。在进行比较时，每多一行，代表多一倍的数据。
单行倍数：复制一个原始数据，用来移位记数。比较的数据原始是0，用移位数据生成新的数据后，进行比较。
状态机控制是复制，比较，移位，等等，每种操作都有一个状态指示信号。
存储分为固定存储和移动存储。固定存储的数据不会发生变化，移动存储的数据当有人读取后，消失。
== 预测长度 ==
&nbsp将参考物体与待测物体放在一起，根据视觉反馈，预测待测物体长度。<br />
设计参考物长度为甲，内部记录为两组数据：量甲-映甲；待测物只有一组数据：量某-映乙。根据映甲与映乙与的比例，和量甲的定义，确定量某的数值。
映长度为128位，量长度也是128位，但二者表达的意义不同。映的长度是绝对值，而量是人为定义值。
定义映射：映-量。以映为基本单位，对应的量是多少，则可以得到函数：f(x)=y。对应任意输入映，都会得到对应的量，再由数据转换，得到量的实际意义。<br />
简化：映类甲-映类乙。二者都是观测量。可以建立直接简单的一一映射。<br />
=== 均匀化公式 ===
{{{
当新的数小于原大数时：
  当有连续的1：
    向1中间插零
  向1的两端加零
}}}
=== 小数构建大数 ===
{{{
用均匀化公式构建
******
计数器清零
新数=小数
当新数小于大数：
  当移位个数小于小数
    移位新数
    如新数等于大数
      跳出
  计数器加1
通过移位个数和计数器得到构建大数的具体方法？？无用？
}}}
